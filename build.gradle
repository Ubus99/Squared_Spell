import org.gradle.internal.jvm.Jvm

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'de.undercouch:gradle-download-task:3.2.0'
		classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
	}
}

// Because Forge is too stupid to fix Deprecation Issues, and we cannot fix it on our end! (until we fork Forge)
allprojects {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:deprecation"
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

apply plugin: 'idea'
idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

apply plugin: 'forge'
apply plugin: "com.wynprice.cursemaven"

version = "0.0.1"
group = "com.example.spell2" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "spell2"

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = ".minecraft"
	mappings = 'stable_12'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.bootClasspath = Jvm.current().getJre().getHomeDir().toString() + "/lib/rt.jar"

repositories {
	maven {
		name = "gt"
		url = "http://gregtech.overminddl1.com/"
	}
	/* Optional other repo's, not needed for the below listed optional dependencies
	maven {
		name = "OC repo"
		url = "http://maven.cil.li/"
	}
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = "jabba"
		url = "http://default.mobiusstrip.eu/maven"
	}
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven/"
	}
	maven {
		name = "Apple"
		url "http://www.ryanliptak.com/maven/"
	}
	ivy {
		name "BuildCraft"
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
	}
	*/
}

dependencies {
	// `compile` means it is both compiled with and run with `run*`
	// `compileOnly` means it is only used to compile with but not run in dev via run*

	// real example
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// for more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html

	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "curse.maven:NotEnoughItems-1.7.10-2.0.1-GTNH-universal.jar:2906319"
}


processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task buildInfo {
	def cmd = "git rev-parse --short HEAD"
	def proc = cmd.execute()
	proc.waitFor()
	if (proc.exitValue() == 0) {
		ext.revision = proc.text.trim()
	} else {
		ext.revision = "GITBORK"
	}

	if (System.getenv().BUILD_NUMBER != null) {
		ext.buildNum = "${System.getenv().BUILD_NUMBER}"
	} else {
		def date = new Date().format('yyyyMMddHHmmss')
		ext.buildNum = "DEV.${date}.${project.buildInfo.revision}"
	}
}

ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
	artifact_version = "${project.buildInfo.buildNum}"
} else {
	artifact_version = "${System.getenv().ARTIFACT_VERSION}"
}

version = "${version}-${artifact_version}"

task devJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

artifacts {
	archives devJar
	archives sourcesJar
}